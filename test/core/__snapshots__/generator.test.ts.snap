// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generator should generate an entity & model definition for a schema 1`] = `
"type SeedModel = z.infer<typeof SeedSchema>;

export class Seed extends Entity<SeedModel> {
    constructor(id: string | number) {
        super(id, SeedSchema, store)
    }

    get id(): SeedModel["id"] {
        const value = this.get("id")
        if (!value) {
          throw new KeyAccessError<Seed>("id")
        }

        return value
    }

    set id(value: SeedModel["id"]) {
        this.set("id", value);
    }

    get background(): SeedModel["background"] {
        const value = this.get("background")
        if (!value) {
          throw new KeyAccessError<Seed>("background")
        }

        return value
    }

    set background(value: SeedModel["background"]) {
        this.set("background", value);
    }

    get body(): SeedModel["body"] {
        const value = this.get("body")
        if (!value) {
          throw new KeyAccessError<Seed>("body")
        }

        return value
    }

    set body(value: SeedModel["body"]) {
        this.set("body", value);
    }

    get accessory(): SeedModel["accessory"] {
        const value = this.get("accessory")
        if (!value) {
          throw new KeyAccessError<Seed>("accessory")
        }

        return value
    }

    set accessory(value: SeedModel["accessory"]) {
        this.set("accessory", value);
    }

    get head(): SeedModel["head"] {
        const value = this.get("head")
        if (!value) {
          throw new KeyAccessError<Seed>("head")
        }

        return value
    }

    set head(value: SeedModel["head"]) {
        this.set("head", value);
    }

    get glasses(): SeedModel["glasses"] {
        const value = this.get("glasses")
        if (!value) {
          throw new KeyAccessError<Seed>("glasses")
        }

        return value
    }

    set glasses(value: SeedModel["glasses"]) {
        this.set("glasses", value);
    }
}
"
`;

exports[`Generator should generate an entity & model definition for a schema with a nullable field 1`] = `
"type NounModel = z.infer<typeof NounSchema>;

export class Noun extends Entity<NounModel> {
    constructor(id: string, data?: NounModel) {
        super(id, NounSchema, store)
        this.data = data || {};
    }

    static load(id: string): Noun | null {
        const data = store.get<NounModel>("noun", id);
        if (!data) {
           return new Noun(id);
        }

        return new Noun(id, data);
    }

    get id(): NounModel["id"] {
        const value = this.get("id")
        if (!value) {
          throw new KeyAccessError<Noun>("id")
        }

        return value
    }

    set id(value: NounModel["id"]) {
        this.set("id", value);
    }

    get seed(): NounModel["seed"] {
        const value = this.get("seed")
        if (!value && value !== null) {
          throw new KeyAccessError<Noun>("seed")
        }

        return value
    }

    set seed(value: NounModel["seed"]) {
        this.set("seed", value);
    }

    get owner(): NounModel["owner"] {
        const value = this.get("owner")
        if (!value) {
          throw new KeyAccessError<Noun>("owner")
        }

        return value
    }

    set owner(value: NounModel["owner"]) {
        this.set("owner", value);
    }

    get votes(): NounModel["votes"] {
        const value = this.get("votes")
        if (!value) {
          throw new KeyAccessError<Noun>("votes")
        }

        return value
    }

    set votes(value: NounModel["votes"]) {
        this.set("votes", value);
    }
}
"
`;

exports[`Generator should get all classes in models.ts 1`] = `
"type SeedModel = z.infer<typeof SeedSchema>;

export class Seed extends Entity<SeedModel> {
    constructor(id: string) {
        super(id, SeedSchema, store)
    }

    get id(): SeedModel["id"] {
        const value = this.get("id")
        if (!value) {
          throw new KeyAccessError<Seed>("id")
        }

        return value
    }

    set id(value: SeedModel["id"]) {
        this.set("id", value);
    }

    get background(): SeedModel["background"] {
        const value = this.get("background")
        if (!value) {
          throw new KeyAccessError<Seed>("background")
        }

        return value
    }

    set background(value: SeedModel["background"]) {
        this.set("background", value);
    }

    get body(): SeedModel["body"] {
        const value = this.get("body")
        if (!value) {
          throw new KeyAccessError<Seed>("body")
        }

        return value
    }

    set body(value: SeedModel["body"]) {
        this.set("body", value);
    }

    get accessory(): SeedModel["accessory"] {
        const value = this.get("accessory")
        if (!value) {
          throw new KeyAccessError<Seed>("accessory")
        }

        return value
    }

    set accessory(value: SeedModel["accessory"]) {
        this.set("accessory", value);
    }

    get head(): SeedModel["head"] {
        const value = this.get("head")
        if (!value) {
          throw new KeyAccessError<Seed>("head")
        }

        return value
    }

    set head(value: SeedModel["head"]) {
        this.set("head", value);
    }

    get glasses(): SeedModel["glasses"] {
        const value = this.get("glasses")
        if (!value) {
          throw new KeyAccessError<Seed>("glasses")
        }

        return value
    }

    set glasses(value: SeedModel["glasses"]) {
        this.set("glasses", value);
    }
}
"
`;
