import {
  DocumentNode,
  ObjectTypeDefinitionNode,
  parse,
} from "graphql/language";
import * as fs from "fs";
import { SchemaHandler } from "../schema";
import { isEnumTypeDefinition, isObjectTypeDefinition } from "../common";
import { snakeCase } from "lodash";

type MigrationGeneratorOptions = {
  outputPath: string;
  schemaPath: string;
};
//
// function isDecimal(type: FieldDefinitionNode) {
//   return { isDecimal: true, type: "DECIMAL", arg };
// }

export class MigrationGenerator {
  public file: string = "";
  public schema: DocumentNode;

  constructor(private readonly options: MigrationGeneratorOptions) {
    this.schema = this.loadSchema(options.schemaPath);
  }

  protected loadSchema(path: string) {
    const document = fs.readFileSync(path, "utf-8");
    return parse(document);
  }

  get entities() {
    return this.schema.definitions.filter(isObjectTypeDefinition);
  }

  public generateMigration(entity: ObjectTypeDefinitionNode) {
    const generator = new SchemaHandler(this.schema, {
      String: "TEXT",
      Number: "INTEGER",
      Boolean: "BOOLEAN",
      BigInt: "BIGINT",
      Date: "TIMESTAMPTZ",
      Bytes: "BIGINT",
      Enum: (type) => type.name.value,
    });
    const columnTypes = generator.mapFieldsToColumn(entity.fields || []);
    const columns = columnTypes
      .filter((c) => !c.isRelation)
      .map((column) => {
        return `${snakeCase(column.name)} ${column.type}${
          column.isArray ? "[]" : ""
        }${column.isNullable ? "" : " NOT NULL"}`;
      });
    return (this.file =
      this.file +
      `CREATE TABLE IF NOT EXISTS ${snakeCase(
        entity.name.value
      )} (\n${columns.join(",\n")}\n)`);
  }

  public generateEnums() {
    const enums = this.schema.definitions.filter(isEnumTypeDefinition);
    const enumTypes = enums.map((enumType) => {
      let enumValues = enumType.values?.map((value) => value.name.value);
      return `CREATE TYPE ${snakeCase(
        enumType.name.value
      )} AS ENUM (${enumValues?.join(",")});`;
    });
    return (this.file = this.file + enumTypes.join("\n") + "\n\n");
  }

  public generateMigrations() {
    this.entities.map((entity) => this.generateMigration(entity)).join("\n\n");
  }

  public generate(save = false) {
    this.generateEnums();
    this.generateMigrations();

    if (save) {
      const header = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.`;
      fs.writeFileSync(this.options.outputPath, `${header}\n\n${this.file}`);
    }
  }
}
