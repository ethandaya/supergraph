import {
  DocumentNode,
  ObjectTypeDefinitionNode,
  parse,
} from "graphql/language";
import * as fs from "fs";
import { SchemaHandler } from "../schema";
import { isEnumTypeDefinition, isObjectTypeDefinition } from "../common";
import { format } from "sql-formatter";

type MigrationGeneratorOptions = {
  outputPath: string;
  schemaPath: string;
};
//
// function isDecimal(type: FieldDefinitionNode) {
//   return { isDecimal: true, type: "DECIMAL", arg };
// }

export class MigrationGenerator {
  public file: string = "";
  public schema: DocumentNode;

  constructor(private readonly options: MigrationGeneratorOptions) {
    this.schema = this.loadSchema(options.schemaPath);
  }

  protected loadSchema(path: string) {
    const document = fs.readFileSync(path, "utf-8");
    return parse(document);
  }

  get entities() {
    return this.schema.definitions.filter(isObjectTypeDefinition);
  }

  get enums() {
    return this.schema.definitions.filter(isEnumTypeDefinition);
  }

  public generateMigration(entity: ObjectTypeDefinitionNode) {
    const generator = new SchemaHandler(this.schema, {
      String: "TEXT",
      Number: "INTEGER",
      Boolean: "BOOLEAN",
      BigInt: "BIGINT",
      Date: "TIMESTAMPTZ",
      Bytes: "BIGINT",
      Enum: (type) => type.name.value,
    });
    const columnTypes = generator.mapFieldsToColumn(entity.fields || []);
    const columns = columnTypes
      .map((column) => {
        return `"${column.name}" ${column.type}${
          column.isPrimaryKey ? " PRIMARY KEY" : ""
        }${column.isArray ? "[]" : ""}${
          column.isNullable ? "" : column.isPrimaryKey ? "" : " NOT NULL"
        }`;
      })
      .concat(['"createdAt" BIGINT', '"updatedAt" BIGINT']);
    return (this.file =
      this.file +
      `
      CREATE TABLE IF NOT EXISTS "${entity.name.value}" (\n${columns.join(
        ",\n"
      )}\n);`);
  }

  public generateEnums() {
    const enums = this.schema.definitions.filter(isEnumTypeDefinition);
    const enumTypes = enums.map((enumType) => {
      let enumValues = enumType.values?.map((value) => value.name.value);
      return `
      CREATE TYPE "${enumType.name.value}" AS ENUM (${enumValues
        ?.map((e) => `'${e}'`)
        .join(",")});`;
    });
    return (this.file = this.file + enumTypes.join("\n") + "\n\n");
  }

  public generateMigrations() {
    this.entities.map((entity) => this.generateMigration(entity)).join("\n\n");
  }

  public generateResets() {
    const tables = this.entities.map((entity) => entity.name.value);
    const dropTableStmt = tables.map(
      (table) => `DROP TABLE IF EXISTS "${table}";\n`
    );
    const enums = this.enums.map((enumType) => enumType.name.value);
    const dropEnumStmt = enums.map(
      (enumType) => `DROP TYPE IF EXISTS "${enumType}";\n`
    );
    return (this.file =
      this.file + dropTableStmt.join("") + dropEnumStmt.join(""));
  }

  public generate(save = false) {
    this.generateResets();
    this.generateEnums();
    this.generateMigrations();

    if (save) {
      const formatted = format(this.file, {
        language: "postgresql",
      });
      const header = `/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */`;
      fs.writeFileSync(this.options.outputPath, `${header}\n\n${formatted}`);
    }
  }
}
