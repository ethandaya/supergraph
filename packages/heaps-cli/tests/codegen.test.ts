import { describe, expect, it } from "vitest";
import { codegen } from "../src/commands/codegen/command/codegen";
import os from "os";
import fs from "fs";

describe("Codegen", () => {
  it("should correctly generate all artifacts for schema", async () => {
    const tmpDir = os.tmpdir();
    fs.writeFileSync(
      tmpDir + "/schema.graphql",
      `
        type Test @entity {
            id: ID!
            name: String!
        }
    `
    );
    await codegen({
      watch: false,
      pathToSchema: tmpDir + "/schema.graphql",
      outputDir: tmpDir,
    });

    expect(fs.existsSync(tmpDir + "/models.ts")).toBe(true);
    expect(fs.existsSync(tmpDir + "/schema.ts")).toBe(true);
    expect(fs.readFileSync(tmpDir + "/models.ts", "utf-8"))
      .toMatchInlineSnapshot(`
        "// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

        import { z } from \\"zod\\";
        import { baseSchema } from \\"@heaps/engine\\";

        export const TestSchema = baseSchema.extend({ name: z.string() });
        "
      `);
    expect(
      fs.readFileSync(tmpDir + "/schema.ts", "utf-8")
    ).toMatchInlineSnapshot(`
      "// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

      import { z } from \\"zod\\";
      import { SyncCrudEntity, KeyAccessError } from \\"@heaps/engine\\";
      import { TestSchema } from \\"/var/folders/1r/z15wpmvs3zv_yl5d6j6wpk0r0000gn/T./models\\";
      import { store } from \\"./store\\";

      export type SchemaNames = \\"Test\\";
      type TestModel = z.infer<typeof TestSchema>;

      export class Test extends SyncCrudEntity<\\"Test\\", TestModel, typeof TestSchema> {
        constructor(id: string, data?: TestModel) {
          super(id, \\"Test\\", TestSchema, store);
          this._data = { id, ...data } || {};
        }

        static load(id: string): Test | null {
          const data = store.get(\\"Test\\", id);
          if (!data) {
            return new Test(id);
          }

          return new Test(id, data);
        }

        get id(): TestModel[\\"id\\"] {
          const value = this.get(\\"id\\");
          if (typeof value === \\"undefined\\" && value !== null) {
            throw new KeyAccessError<Test>(\\"id\\");
          }

          return value;
        }

        set id(value: TestModel[\\"id\\"]) {
          this.set(\\"id\\", value);
        }

        get name(): TestModel[\\"name\\"] {
          const value = this.get(\\"name\\");
          if (typeof value === \\"undefined\\" && value !== null) {
            throw new KeyAccessError<Test>(\\"name\\");
          }

          return value;
        }

        set name(value: TestModel[\\"name\\"]) {
          this.set(\\"name\\", value);
        }
      }
      "
    `);
  });
});
