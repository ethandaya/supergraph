// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Commands should be able to codegen model entities 1`] = `
"// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { z } from "zod";
import { Entity, KeyAccessError, SQLiteStore as Store } from "@heaps/engine";
import { TestSchema } from "../models";

type SchemaNames = "test";
export const store = new Store<SchemaNames>("", {
  test: TestSchema,
});

type TestModel = z.infer<typeof TestSchema>;

export class Test extends Entity<TestModel, typeof TestSchema> {
    constructor(id: string, data?: TestModel) {
        super(id, TestSchema, store)
        this.data = { id, ...data } || {};
    }

    static load(id: string): Test | null {
        const data = store.get<TestModel>("test", id);
        if (!data) {
           return new Test(id);
        }

        return new Test(id, data);
    }

    get id(): TestModel["id"] {
        const value = this.get("id")
        if (typeof value === "undefined") {
          throw new KeyAccessError<Test>("id")
        }

        return value
    }

    set id(value: TestModel["id"]) {
        this.set("id", value);
    }

    get name(): TestModel["name"] {
        const value = this.get("name")
        if (typeof value === "undefined") {
          throw new KeyAccessError<Test>("name")
        }

        return value
    }

    set name(value: TestModel["name"]) {
        this.set("name", value);
    }

    get age(): TestModel["age"] {
        const value = this.get("age")
        if (typeof value === "undefined") {
          throw new KeyAccessError<Test>("age")
        }

        return value
    }

    set age(value: TestModel["age"]) {
        this.set("age", value);
    }

    get address(): TestModel["address"] {
        const value = this.get("address")
        if (typeof value === "undefined") {
          throw new KeyAccessError<Test>("address")
        }

        return value
    }

    set address(value: TestModel["address"]) {
        this.set("address", value);
    }
}
"
`;
